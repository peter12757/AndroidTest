// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from audio.djinni

package com.eathemeat.audio;

import java.util.concurrent.atomic.AtomicBoolean;
import javax.annotation.CheckForNull;
import javax.annotation.Nonnull;

/**interface */
/*package*/ interface AudioApi {
    public int startAudiorecord(int audioSource, int sampleRateInHz, int channelConfig, int audioFormat, int bufferSizeInBytes);

    static final class CppProxy implements AudioApi
    {
        private final long nativeRef;
        private final AtomicBoolean destroyed = new AtomicBoolean(false);

        private CppProxy(long nativeRef)
        {
            if (nativeRef == 0) throw new RuntimeException("nativeRef is zero");
            this.nativeRef = nativeRef;
        }

        private native void nativeDestroy(long nativeRef);
        public void _djinni_private_destroy()
        {
            boolean destroyed = this.destroyed.getAndSet(true);
            if (!destroyed) nativeDestroy(this.nativeRef);
        }
        protected void finalize() throws java.lang.Throwable
        {
            _djinni_private_destroy();
            super.finalize();
        }

        @Override
        public int startAudiorecord(int audioSource, int sampleRateInHz, int channelConfig, int audioFormat, int bufferSizeInBytes)
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            return native_startAudiorecord(this.nativeRef, audioSource, sampleRateInHz, channelConfig, audioFormat, bufferSizeInBytes);
        }
        private native int native_startAudiorecord(long _nativeRef, int audioSource, int sampleRateInHz, int channelConfig, int audioFormat, int bufferSizeInBytes);
    }
}
